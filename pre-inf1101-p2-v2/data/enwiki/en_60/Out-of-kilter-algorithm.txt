The out-of-kilter algorithm is an algorithm that computes the solution to the minimum-cost flow problem in a flow network. It was published in 1961 by D. R. Fulkerson and is described here. The analog of steady state flow in a network of nodes and arcs may describe a variety of processes. Examples include transportation systems & personnel assignment actions. Arcs generally have cost & capacity parameters. A recurring problem is trying to determine the minimum cost route between two points in a capacitated network. The idea of the algorithm is to identify out-of-kilter arcs and modify the flow network until all arcs are in-kilter and a minimum cost flow has been reached. The algorithm can be used to minimize the total cost of a constrained flow in an oriented network. == Algorithm == To begin, the algorithm takes a single cycle and a set of node numbers. It then searches for out-of-kilter arcs. If none are found the algorithm is complete. If the flow needs to be increased or decreased to bring an arc into kilter, the algorithm will look for a path that increases or decreases the flow respectively. If no paths are found to improve the system then there is no feasible flow. This is done until all arcs are in- kilter, at which point the algorithm is complete. Suppose that the network has n nodes and m oriented arcs. We write j ~ (i,i^1) if arc j has initial node i and terminal node i^1. Let x(j) be the flow along arc j (from node i to node i^1). Define c^-(j) and c^+(j) to be the lower and upper capacity bounds on the flow in arc j. The capacities may be either finite, or infinite on some or all arcs for either the lower or upper bounds. The problem that is at hand to solve is to minimize: \sum_{j=1}^md(j) x(j) subject to: \sum_{j:j~(i,i^1)}x(j) -\sum_{j:j~(i^1,i)}x(j) = 0 for each i = 1,....,n (1) , and: c^-(j)\leq x(j)\leq c^+(j) for each j = 1,....,n (2) If a given flow x satisfies (1), then the flow is conserved at each node and we call the flow a circulation. If the flow x satisfies (2) we say it is feasible. == Complexity == Runtime: * The algorithm terminates within O(mU) iterations * Dominant computation is shortest path computation * Total runtime is: O(m^2 U+mUn\log(n)) ==References== ==External links== * (in Spanish) Category:Network flow problem 
