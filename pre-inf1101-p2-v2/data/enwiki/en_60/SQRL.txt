SQRL (pronounced "squirrel") or Secure, Quick, Reliable Login (formerly Secure QR Login) is a draft open standard for secure website login and authentication. The software typically uses a link of the scheme sqrl:// or optionally a QR code, where a user identifies via a pseudonymous zero- knowledge proof rather than providing a user ID and password. This method is thought to be impervious to a brute force password attack or data breach. It shifts the burden of security away from the party requesting the authentication and closer to the operating system implementation of what is possible on the hardware, as well as to the user. SQRL was proposed by Steve Gibson of Gibson Research Corporation in October 2013 as a way to simplify the process of authentication without the risk of revelation of information about the transaction to a third party. ==History== The acronym SQRL was coined by Steve Gibson and the protocol drafted, discussed and analyzed in-depth, by himself and a community of Internet security enthusiasts on the news.grc.com newsgroups and during his weekly podcast, Security Now!, on October 2, 2013. Within two days of the airing of this podcast, the W3C expressed interest in working on the standard. Ian Maddox and Kyle Moschetto, Google Cloud Solutions Architects mention SQRL in their document "Modern password security for system designers". A thesis on SQRL analyzed and found that "it appears to be an interesting approach, both in terms of the envisioned user experience as well as the underlying cryptography. SQRL is mostly combining well established cryptography in a novel way." ==Benefits== The protocol is an answer to a problem of identity fragmentation. It improves on protocols such as OAuth and OpenID by not requiring a third party to broker the transaction, and by not giving a server any secrets to protect, such as username and password. Additionally, it provides a standard that can be freely used to simplify the login processes available to password manager applications. More importantly the standard is open so no one company can benefit from owning the technology. According to Gibson's website, such a robust technology should be in the public domain so the security and cryptography can be verified, and not deliberately restricted for commercial or other reasons. ===Phishing protections=== SQRL has some design-inherent and intentional phishing defenses, but it is mainly intended to be for authentication, not anti- phishing, despite having some anti-phishing properties. ==Example use case== Example of a SQRL-URL / QR-code, which could be clicked, tapped, or scanned for website authentication. For the protocol to be used on a website, two components are necessary: an implementation, that is part of the Web service to which the implementation authenticates, which displays a QR code or specially crafted URL according to the specifications of the protocol, and a browser plugin or a mobile application, which can read this code in order to provide secure authentication. The SQRL client uses "one-way" functions and the user's single master password to decrypt a secret master key, from which it generates in combination with the site name (comprising the domain name and optionally an additional sub-site identifier: "example.com", "example.edu/chessclub") a (sub-)site-specific public/private key pair. It signs the transaction tokens with the private key and gives the public key to the site, so it can verify the encrypted data. There are no "shared secrets" which a compromise of the site could expose to allow attacks on accounts at other sites. The only thing a successful attacker could get, the public key, would be limited to verifying signatures that are only used at the same site. Even though the user unlocks the master key with a single password, it never leaves the SQRL client; the individual sites do not receive any information from the SQRL process that could be used at any other site. ==SQRL implementations== A number of proof-of-concept implementations have been made for various platforms, including for the server (PHP,https://github.com/trianglman/sqrl Drupal,https://www.drupal.org/project/sqrl, and C# .NEThttps://github.com/jestin/SqrlNethttps://github.com/TechLiam/SQRL-For-Dot- Net-Standard) and for the client (Android,https://github.com/geir54/android- sqrlhttps://play.google.com/store/apps/details?id=net.vrallev.android.sqrl C# .NET,https://github.com/jestin/SqrlNet Java , and Pythonhttps://github.com/bushxnyc/sqrl). There are also various server-end test and debugging sites available.https://www.grc.com/sqrl/demo.htmhttps://www.grc.com/sqrl/diag.htmhttps://sqrl- test.paragon-es.de http://sw.squaltech.com:8080 ==Legal aspects== Steve Gibson states that SQRL is "open and free as it should be", and that the solution is "unencumbered by patents". While SQRL brought a lot of attention to QR code based authentication mechanisms, the suggested protocol is said to have been patented earlier and is not generally available for royalty free use. But Gibson says "What those guys are doing as described in that patentMethod and system for authenticating a user by means of a mobile device US 20100070759 A1 is completely different from the way SQRL operates, so there would be no conflict between SQRL and their patent. Superficially, anything that uses a 2D code for authentication seems "similar"... and superficially all such solutions are. But the details matter, and the way SQRL operates is entirely different in the details." ==See also== * BrowserID * Central Authentication Service * Information Card * Light-Weight Identity * OAuth * OpenID Connect * Single sign-on * WebID * FIDO Alliance ==References== ==External links== * Grc.com * Ghacks.net * Techrepublic review: SQRL: A new method of authentication with QR codes * "Authentication without Passwords Implementing SQRL" - Intel's Daniel Holmlund's presentation at the 2014 HTML5 Developer Conference Category:Access control software Category:Password authentication Category:Authentication methods Category:Barcodes Category:Upcoming software Category:Public-domain software with source code 
