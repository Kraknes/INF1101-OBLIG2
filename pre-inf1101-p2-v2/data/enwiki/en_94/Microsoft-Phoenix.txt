Microsoft Phoenix, being developed at Microsoft Research, is a framework for developing compilers as well as program analysis, testing and optimization tools, to be used as the back-end for future compiler technologies from Microsoft. It is also available as an SDK, a pre-release build of which has been made accessible, to create compilers and code analysis tools using the Phoenix framework. ==Overview== Microsoft Phoenix defines an intermediate representation (IR) for programs, using ASTs, control flow graphs, and an exception handling model. For any program to be handled by Phoenix, it needs to be converted to this representation. The specification for these file type- specific converters, called file readers in Phoenix terminology, is also specified. Phoenix comes included with readers for Portable Executable binary files, CIL and the output of the Visual C++ front-end. Readers for other languages can be written using the Phoenix SDK, though separate tools such as lex and yacc need to be used to write the lexer and parser, respectively. Once the program has been converted to the IR, the analysis and optimization tools can operate on that form. Phoenix includes a selection of tools - including block counting, memory analysis, code coverage, code analysis and optimization. The Phoenix SDK can be used to write and plug-in other tools as well. Code generation is handled by providing architecture-specific (either physical architecture of the processor or a virtual machine architecture) file writers. Phoenix provides the `c2.dll` compiler backend, which it shares with Visual C++, to handle analysis, optimization and code generation for the x86 architecture. Writers for other architectures must be provided separately. As a result of the modular architecture, any component can be replaced without affecting the rest of the system. For example, to target the compiler to a different architecture, only the file writer specific to the architecture needs to be changed, keeping the rest of the stack unchanged. To create a compiler for a new language, only the readers need to be provided. ==Productization== A Phoenix component (phx.dll) is used for some of the static analysis (FxCop) in Visual Studio 2010. (The Phoenix compiler itself, which is required for most instrumentation insertion to work, is not included with Visual Studio.) ==See also== * List of compilers * Roslyn (compiler) ==References== ==External links== *Official Phoenix site *Phoenix SDK June 2008 CTP Release(latest release to the moment of writing) Category:Compilers Category:Microsoft Research 
